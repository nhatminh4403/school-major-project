DESIGN PATTERNS TRONG DỰ ÁN
=========================

1. Repository Pattern
--------------------
- Định nghĩa: Pattern tạo một lớp trung gian giữa domain và data access layer
- Cấu trúc:
  + IRepository<T>: Interface định nghĩa các phương thức CRUD cơ bản
  + BaseRepository<T>: Class implement các phương thức CRUD cơ bản
  + Các interface cụ thể (IFilmRepository, ICinemaRepository...): Kế thừa IRepository<T>
  + Các service class: Kế thừa BaseRepository<T> và implement interface cụ thể

- Lợi ích:
  + Tách biệt logic truy cập dữ liệu
  + Dễ dàng thay đổi implementation
  + Giảm code trùng lặp
  + Dễ dàng test

2. Dependency Injection Pattern
------------------------------
- Định nghĩa: Pattern cho phép các dependency được inject vào một class
- Cấu trúc:
  + Constructor injection trong các service
  + Service registration trong Program.cs
  + Interface-based programming

- Lợi ích:
  + Giảm sự phụ thuộc giữa các thành phần
  + Dễ dàng test
  + Code linh hoạt và dễ bảo trì

3. Generic Repository Pattern
----------------------------
- Định nghĩa: Pattern sử dụng generic type để tạo repository có thể tái sử dụng
- Cấu trúc:
  + IRepository<T> với generic type parameter
  + BaseRepository<T> implement các phương thức chung
  + Các service class kế thừa và mở rộng chức năng

- Lợi ích:
  + Giảm code trùng lặp
  + Dễ dàng thêm entity mới
  + Code sạch và dễ bảo trì

4. Unit of Work Pattern
----------------------
- Định nghĩa: Pattern quản lý transaction và thay đổi trong database
- Cấu trúc:
  + ApplicationDbContext đóng vai trò Unit of Work
  + Các repository sử dụng chung context
  + Transaction management tự động

- Lợi ích:
  + Đảm bảo tính nhất quán của dữ liệu
  + Dễ dàng rollback khi có lỗi
  + Quản lý transaction hiệu quả

CÂU HỎI PHỎNG VẤN PHỔ BIẾN
=========================

0. Kiến Thức Cơ Bản Về Lập Trình
--------------------------------
Q: Giải thích về OOP (Object-Oriented Programming)?
A: OOP là mô hình lập trình dựa trên các đối tượng:
- Encapsulation (Đóng gói): Ẩn dữ liệu và phương thức
- Inheritance (Kế thừa): Class con kế thừa từ class cha
- Polymorphism (Đa hình): Nhiều hình thái khác nhau của một đối tượng
- Abstraction (Trừu tượng): Tạo các lớp trừu tượng

Q: Giải thích về các access modifiers trong C#?
A:
- public: Truy cập từ mọi nơi
- private: Chỉ truy cập trong class
- protected: Truy cập trong class và class con
- internal: Truy cập trong cùng assembly
- protected internal: Truy cập trong assembly hoặc class con

Q: Giải thích về RESTful API?
A: RESTful API là kiến trúc API dựa trên HTTP:
- Resources: Đại diện cho dữ liệu
- HTTP Methods: GET, POST, PUT, DELETE
- Stateless: Không lưu trạng thái
- URL Structure: /api/resource/id
- Status Codes: 200, 201, 400, 404, 500

Q: Giải thích về HTTP Methods?
A:
- GET: Lấy dữ liệu
- POST: Tạo mới dữ liệu
- PUT: Cập nhật toàn bộ dữ liệu
- PATCH: Cập nhật một phần dữ liệu
- DELETE: Xóa dữ liệu

Q: Giải thích về Web API trong ASP.NET Core?
A:
- Controller: Xử lý request
- Action Methods: Xử lý các HTTP methods
- Route: Định nghĩa URL pattern
- Model Binding: Tự động map request data
- Middleware: Xử lý request/response pipeline

Q: Giải thích về Middleware trong ASP.NET Core?
A:
- Pipeline: Chuỗi xử lý request/response
- Order: Thứ tự thực thi quan trọng
- Types:
  + Authentication
  + Authorization
  + Routing
  + CORS
  + Exception Handling

Q: Giải thích về Model Binding trong ASP.NET Core?
A:
- Tự động map request data vào model
- Sources:
  + Form data
  + Query string
  + Route data
  + Request body
- Validation attributes
- Custom model binders

Q: Giải thích về Validation trong ASP.NET Core?
A:
- Data Annotations
- Model validation
- Custom validation
- Client-side validation
- Server-side validation

Q: Giải thích về Exception Handling?
A:
- Try-catch blocks
- Global exception handler
- Custom exception types
- Logging
- Error responses

Q: Giải thích về Logging trong ASP.NET Core?
A:
- Log levels
- Log providers
- Structured logging
- Log filtering
- Custom logging

Q: Giải thích về Configuration trong ASP.NET Core?
A:
- appsettings.json
- Environment variables
- User secrets
- Configuration providers
- Options pattern

Q: Giải thích về Dependency Injection trong ASP.NET Core?
A:
- Service lifetime
- Service registration
- Constructor injection
- Service collection
- Service provider

Q: Giải thích về Routing trong ASP.NET Core?
A:
- Conventional routing
- Attribute routing
- Route constraints
- Route templates
- Route parameters

Q: Giải thích về CORS (Cross-Origin Resource Sharing)?
A:
- Same-origin policy
- CORS headers
- CORS middleware
- CORS policies
- CORS configuration

Q: Giải thích về Authentication trong ASP.NET Core?
A:
- Cookie authentication
- JWT authentication
- Identity framework
- Claims
- Authentication schemes

Q: Giải thích về Authorization trong ASP.NET Core?
A:
- Role-based authorization
- Policy-based authorization
- Claims-based authorization
- Authorization handlers
- Authorization requirements

Q: Giải thích về Session và State Management?
A:
- Session state
- Temp data
- View data
- View bag
- Application state

Q: Giải thích về Caching trong ASP.NET Core?
A:
- In-memory cache
- Distributed cache
- Response cache
- Cache dependencies
- Cache invalidation

Q: Giải thích về File Upload trong ASP.NET Core?
A:
- IFormFile
- File size limits
- File type validation
- File storage
- File streaming

Q: Giải thích về SignalR?
A:
- Real-time communication
- Hubs
- Clients
- Groups
- Connection management

1. Kiến Thức Cơ Bản
------------------
Q: Giải thích về SOLID principles?
A: SOLID là 5 nguyên tắc thiết kế hướng đối tượng:
- Single Responsibility: Mỗi class chỉ nên có một nhiệm vụ
- Open/Closed: Có thể mở rộng nhưng không sửa đổi code hiện có
- Liskov Substitution: Các class con có thể thay thế class cha
- Interface Segregation: Tách nhỏ interface thành các phần nhỏ hơn
- Dependency Inversion: Phụ thuộc vào abstraction, không phụ thuộc vào implementation

Q: Giải thích về Dependency Injection?
A: DI là pattern cho phép các dependency được inject vào class thay vì class tự tạo chúng:
- Constructor Injection
- Property Injection
- Method Injection
Lợi ích: Giảm coupling, dễ test, dễ bảo trì

2. Kiến Thức Entity Framework
---------------------------
Q: Giải thích về Entity Framework Core?
A: EF Core là ORM framework cho .NET:
- Code First: Tạo database từ code
- Database First: Tạo code từ database
- Migration: Quản lý thay đổi schema
- DbContext: Quản lý connection và transaction

Q: Giải thích về lazy loading và eager loading?
A: 
- Lazy Loading: Load dữ liệu liên quan khi cần
- Eager Loading: Load tất cả dữ liệu liên quan ngay lập tức
- Include(): Phương thức eager loading trong EF Core

3. Kiến Thức Repository Pattern
-----------------------------
Q: Tại sao sử dụng Repository Pattern?
A: 
- Tách biệt logic truy cập dữ liệu
- Dễ dàng thay đổi implementation
- Giảm code trùng lặp
- Dễ dàng test

Q: Giải thích về Generic Repository?
A:
- Sử dụng generic type để tạo repository có thể tái sử dụng
- Giảm code trùng lặp
- Dễ dàng thêm entity mới
- Code sạch và dễ bảo trì

4. Kiến Thức Async/Await
----------------------
Q: Giải thích về async/await?
A:
- Async: Đánh dấu method là bất đồng bộ
- Await: Chờ kết quả của operation bất đồng bộ
- Lợi ích: Tăng hiệu suất, không block thread chính

Q: Khi nào nên sử dụng async/await?
A:
- Khi thực hiện I/O operations
- Khi gọi API
- Khi truy cập database
- Khi xử lý file

5. Kiến Thức Testing
------------------
Q: Giải thích về Unit Testing?
A:
- Test từng đơn vị code riêng biệt
- Sử dụng mocking để giả lập dependencies
- Đảm bảo code hoạt động đúng
- Dễ dàng phát hiện lỗi

Q: Cách viết test cho Repository?
A:
- Mock DbContext
- Test các phương thức CRUD
- Test các trường hợp đặc biệt
- Đảm bảo coverage

6. Kiến Thức Clean Code
---------------------
Q: Giải thích về Clean Code?
A:
- Code dễ đọc, dễ hiểu
- Tuân thủ các nguyên tắc SOLID
- Đặt tên biến, hàm rõ ràng
- Tách biệt các concern

Q: Cách viết Clean Code?
A:
- Đặt tên có ý nghĩa
- Hàm ngắn gọn, một nhiệm vụ
- Comment khi cần thiết
- Format code đẹp

7. Kiến Thức Security
-------------------
Q: Giải thích về Authentication và Authorization?
A:
- Authentication: Xác thực người dùng
- Authorization: Phân quyền người dùng
- JWT: Token-based authentication
- Role-based access control

Q: Cách bảo mật API?
A:
- Sử dụng HTTPS
- Validate input
- Rate limiting
- CORS policy

8. Kiến Thức Performance
----------------------
Q: Cách tối ưu performance?
A:
- Sử dụng caching
- Tối ưu query database
- Lazy loading khi cần
- Compress response

Q: Cách debug performance issues?
A:
- Sử dụng profiling tools
- Kiểm tra slow queries
- Monitor memory usage
- Analyze bottlenecks

9. Kiến Thức Git
--------------
Q: Giải thích về Git Flow?
A:
- Master: Branch chính
- Develop: Branch phát triển
- Feature: Branch tính năng mới
- Hotfix: Branch sửa lỗi khẩn cấp

Q: Cách resolve conflicts?
A:
- Pull latest changes
- Identify conflicts
- Choose correct version
- Commit resolved changes

10. Kiến Thức Agile
-----------------
Q: Giải thích về Scrum?
A:
- Sprint: Chu kỳ phát triển
- Backlog: Danh sách công việc
- Sprint Planning: Lên kế hoạch
- Daily Standup: Họp hàng ngày

Q: Cách làm việc nhóm hiệu quả?
A:
- Giao tiếp rõ ràng
- Chia sẻ kiến thức
- Code review
- Pair programming 